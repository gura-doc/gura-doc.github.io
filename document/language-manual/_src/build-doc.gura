#!/usr/bin/env gura
import(markdown)

fileNameTeX = 'gura-lang-e.tex'
dirName@html = '..'

title = 'Gura Language Manual'
author = 'Yutaka Saito'
date = 'June 17th, 2017'

fileNames = [
	'00-Introduction.md'
	'01-Launch-Program.md'
	'02-Syntax.md'
	'03-Data-Type.md'
	'04-Operator.md'
	'05-Environment.md'
	'06-Interpreter.md'
	'07-Function.md'
	'08-Flow-Control.md'
	'09-Object-Oriented-Programming.md'
	'10-Mapping-Process.md'
	'11-Module.md'
	'12-String-and-Binary.md'
	'13-Iterator-List-Operation.md'
	'14-File-Operation.md'
	'15-Network-Operation.md'
	'16-Image-Operation.md'
	'17-Graphical-User-Interface.md'
	'18-Mathematic-Functions.md'
	'19-Template-Engine.md'
]

Renderer@html = class(markdown.Renderer@html) {
	tmpl@headerForPage:public = R'''
	---
	layout: page
	lang: en
	title: ${title}
	${if (prevPage) { 'prevpage: ' + prevPage }}
	${if (nextPage) { 'nextpage: ' + nextPage }}
	---
	{% raw %}
	'''.template()
	footerForPage:public = R'''
	<p />

	{% endraw %}
	'''
	__init__() = {|sys.stdout, true|
		this.out = nil
	}
	OnRenderItemPre(item:item) = {
		if (item.type == `h1) {
			this.out && this.out.print(footerForPage)
			fileName = path.join(dirName@html, 'chapter-%02d.md' % (this.indices[0] + 1))
			println('rendering ', path.filename(fileName))
			this.out = open(fileName, 'w')
			prevPage = 'chapter-%02d.html' % ((this.indices[0] + 1) - 1)
			nextPage = 'chapter-%02d.html' % ((this.indices[0] + 1) + 1)
			tmpl@headerForPage.render(this.out)
		}
		true
	}
	OnRenderItemPost(item:item):void = {
		if (item.type == `root) {
			this.out && this.out.print(footerForPage)
			this.out = nil
		}
	}
}

makeDocument() = {
	doc = markdown.document()
	fileNames.each {|fileName|
		println('reading: ', fileName)
		doc.read(fileName)
	}
	doc
}

output@tex(doc:markdown.document) = {
	doc.render@tex(title, author, date, fileNameTeX)
	sys.stderr.println(fileNameTeX, ' was created.')
}

output@pdf(doc:markdown.document) = {
	output@tex(doc)
	repeat (2) { os.exec('platex', fileNameTeX) }
	os.exec('dvipdfmx', fileNameTeX.replace('.tex', '.dvi'))
}


output@html(doc:markdown.document) = {
	tmpl@naviItem = R'''
	<span class="list-group-item">
	  <a href="#item-1" data-toggle="collapse">
	    <i class="far fa-plus-square"></i>
	  </a>
	  <a href="chapter-${format('%02d', indices[0])}.html">${indices[0]}. ${text}</a>
	</span>
	'''.template()
	println('Output directory: ', dirName@html)
	!path.exists(dirName@html) && fs.mkdir(dirName@html)
	fileName = path.join(dirName@html, 'navi.html')
	println('rendering ', path.filename(fileName))
	open(fileName, 'w') {|out|
		doc.render@toc {|level:number, indices[]:number, anchorName:string, text:string|
			if (level == 0) {
				tmpl@naviItem.render(out)
			} elsif (level == 1) {
				//out.printf(
				//		'<div><span class="toc-index-2">%d.%d</span>' \
				//		'<a href="chapter-%02d.html#%s">%s</a>\</div>\n',
				//		indices[0], indices[1], indices[0], anchorName, text)
			}
		}
	}
	Renderer@html().Render(doc)
}

usage() = {
	sys.stderr.println('usage: gura build-doc [tex|pdf|html]')
}

if (sys.argv.len() < 2) {
	usage()
} else {
	entries = %{
		'tex' => output@tex
		'pdf' => output@pdf
		'html' => output@html
	}
	try { funcs = entries[sys.argv[1..]] } catch { usage() }
	doc = makeDocument()
	funcs.each {|func| func(doc)}
}

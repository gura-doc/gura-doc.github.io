#!/usr/bin/env gura
import(markdown)

fileNameTeX = 'gura-lang-e.tex'
dirName@html = '..'

title = 'Gura Language Manual'
author = 'Yutaka Saito'
date = 'June 17th, 2017'

fileNames = [
	'00-Introduction.md'
	'01-Launch-Program.md'
	'02-Syntax.md'
	'03-Data-Type.md'
	'04-Operator.md'
	'05-Environment.md'
	'06-Interpreter.md'
	'07-Function.md'
	'08-Flow-Control.md'
	'09-Object-Oriented-Programming.md'
	'10-Mapping-Process.md'
	'11-Module.md'
	'12-String-and-Binary.md'
	'13-Iterator-List-Operation.md'
	'14-File-Operation.md'
	'15-Network-Operation.md'
	'16-Image-Operation.md'
	'17-Graphical-User-Interface.md'
	'18-Mathematic-Functions.md'
	'19-Template-Engine.md'
]

idxChapterLast = fileNames.len()

Renderer@html = class(markdown.Renderer@html) {
	tmpl@headerForPage:public = R'''
	---
	layout: page
	lang: en
	title: ${title}
	${if (prevPage) { 'prevpage: ' + prevPage }}
	${if (nextPage) { 'nextpage: ' + nextPage }}
	---
	{% raw %}
	'''.template()
	footerForPage:public = R'''
	<p />

	{% endraw %}
	'''
	__init__() = {|sys.stdout, true|
		this.out = nil
	}
	OnRenderItemPre(item:item) = {
		if (item.type == `h1) {
			this.out && this.out.print(footerForPage)
			idxChapter = this.indices[0] + 1
			fileName = path.join(dirName@html, 'chapter-%02d.md' % (idxChapter))
			println('rendering ', path.filename(fileName))
			this.out = open(fileName, 'w')
			prevPage = nextPage = '""'
			if (idxChapter > 1) {
				prevPage = 'chapter-%02d.html' % (idxChapter - 1)
			}
			if (idxChapter + 1 <= idxChapterLast) {
				nextPage = 'chapter-%02d.html' % (idxChapter + 1)
			}
			tmpl@headerForPage.render(this.out)
		}
		true
	}
	OnRenderItemPost(item:item):void = {
		if (item.type == `root) {
			this.out && this.out.print(footerForPage)
			this.out = nil
		}
	}
}

makeDocument() = {
	doc = markdown.document()
	fileNames.each {|fileName|
		//println('reading: ', fileName)
		doc.read(fileName)
	}
	doc
}

output@tex(doc:markdown.document) = {
	doc.render@tex(title, author, date, fileNameTeX)
	sys.stderr.println(fileNameTeX, ' was created.')
}

output@pdf(doc:markdown.document) = {
	output@tex(doc)
	repeat (2) { os.exec('platex', fileNameTeX) }
	os.exec('dvipdfmx', fileNameTeX.replace('.tex', '.dvi'))
}

NaviItem = struct(level:number, indices[]:number, anchorName:string, text:string, itemList[] => [])

printNaviItems(out:stream:w, itemList[]:NaviItem) = {
	tmpl@naviItem = R'''
	<span class="list-group-item">
	${if (item.itemList.isempty())}
	<span></span>
	${else}
	<a href="#naviitem-${item.anchorName}" data-toggle="collapse"><i class="far fa-plus-square"></i></a>
	${end}
	<a href="chapter-${'%02d' % item.indices[0]}.html#${item.anchorName}">${item.indices.head(item.level + 1).join('.')} ${item.text}</a>
	</span>
	'''T
	tmpl@naviGroupOpen = R'''
	<div class="list-group collapse" id="naviitem-${item.anchorName}">
	'''T
	tmpl@naviGroupClose = R'''
	</div>
	'''T
	itemList.each {|item|
		tmpl@naviItem.render(out)
		if (!item.itemList.isempty()) {
			tmpl@naviGroupOpen.render(out)
			printNaviItems(out, item.itemList)
			tmpl@naviGroupClose.render(out)
		}
	}
}

printNaviItems2(out:stream:w, itemList[]:NaviItem) = {
	out = sys.stdout
	itemList.each {|item|
		printf('%*s%s %s\n', item.level * 2, '', item.indices.head(item.level + 1).join('.'), item.text)
		if (!item.itemList.isempty()) {
			printNaviItems(out, item.itemList)
		}
	}
}

output@html(doc:markdown.document) = {
	println('Output directory: ', dirName@html)
	!path.exists(dirName@html) && fs.mkdir(dirName@html)

	itemListRoot = []
	itemStack = []
	itemList = itemListRoot
	itemPrev = nil
	doc.render@toc {|level:number, indices[]:number, anchorName:string, text:string|
		item = NaviItem(level, indices.clone(), anchorName, text)
		if (itemPrev) {
			if (level < itemPrev.level) {
				repeat (itemPrev.level - level) {
					itemStack.erase(-1)
				}
				itemList = if (itemStack.isempty()) { itemListRoot } else { itemStack[-1].itemList }
			}
			if (level > itemPrev.level) {
				if (level > itemPrev.level + 1) { println('**** error ****') }
				itemList = itemPrev.itemList
				itemStack.add(item)
			}
		}
		itemList.add(item)
		itemPrev = item
	}
	fileNameNavi = path.join(dirName@html, 'navi.html')
	println('rendering ', path.filename(fileNameNavi))
	open(fileNameNavi, 'w') {|out|
		printNaviItems(out, itemListRoot)
	}
	/*
	fileNameNavi = path.join(dirName@html, 'navi.html')
	println('rendering ', path.filename(fileNameNavi))
	open(fileNameNavi, 'w') {|out|
		doc.render@toc {|level:number, indices[]:number, anchorName:string, text:string|
			if (level == 0) {
				tmpl@naviItem.render(out)
			} elsif (level == 1) {
				//out.printf(
				//		'<div><span class="toc-index-2">%d.%d</span>' \
				//		'<a href="chapter-%02d.html#%s">%s</a>\</div>\n',
				//		indices[0], indices[1], indices[0], anchorName, text)
			}
		}
	}
	*/
	//Renderer@html().Render(doc)
}

usage() = {
	sys.stderr.println('usage: gura build-doc [tex|pdf|html]')
}

if (sys.argv.len() < 2) {
	usage()
} else {
	entries = %{
		'tex' => output@tex
		'pdf' => output@pdf
		'html' => output@html
	}
	try { funcs = entries[sys.argv[1..]] } catch { usage() }
	doc = makeDocument()
	funcs.each {|func| func(doc)}
}
